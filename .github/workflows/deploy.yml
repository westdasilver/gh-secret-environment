name: Deployment
on:
  push:
    branches:
      - main
      - dev
env:
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    env:
      MONGODB_CLUSTER_ADDRESS: testcluster.9umsb.mongodb.net
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        # wait-on은 특정 리소스(포트, 파일, http 엔드포인트 등)가 사용 가능할 때까지 기다리는 CLI 도구입니다.
        # 여기서는 서버가 $PORT에서 완전히 시작될 때까지 기다립니다.
        # & 기호는 백그라운드에서 서버를 실행하게 해줍니다.
        run: npm start & npx wait-on http://127.0.0.1:$PORT
      - name: Run tests
        run: npm test
      - name: Output information
        # YAML에서 | 파이프 문자는 여러 줄의 문자열을 작성할 때 사용하는 블록 스타일 표시입니다
        # $ 나 { } 같은 특수문자가 있을 때 반드시 파이프를 써야하는 것은 아니지만
        # YAML 파서가 이런 특수문자들을 문자 그대로 해석하도록 하기 위해
        # 파이프를 사용하는 것이 안전하고 권장되는 방법입니다
        # 파이프가 없으면 YAML 파서가 $나 { }를 특별한 문법으로 해석하려고 시도할 수 있어서
        # 의도하지 않은 동작이나 오류가 발생할 수 있습니다
        run: | 
          echo "MONGODB_USER_NAME: ${{ secrets.MONGODB_USERNAME }}"
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |        
          echo "MONGODB_USER_NAME: ${{ secrets.MONGODB_USERNAME }}"
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
